--> To install fast api: 
        pip install fastapi uvicorn pyd


--To run fast api file(main.py): 
        uvicorn main:app --reload

--To check and interact with autogenerated documentation: 
        /docs

--> software>> software means install and run at same system
               1. static--> less interaction with user--> clock, calander
               2. dynamic--> more interaction with user >> exel, word, powerpoint
                         --> only 4 operation posible(CRUD)[CREATE, RETRIVE, UPDATE, DELETE]
--> website>> -->special software that install is other system and use from anoter syster
              --> client<---------------->server
                              http
              -->1. static--> like govt based websites
              -->2. dynamic--> like amozon, instagram
                           --> http methods: [GET, POST, PUT, DELETE]

# path params: use for update, retrive and delete

        | Concept              | Meaning / Use                                                  | Example Code Snippet                                                                          | Output / Behavior                                                            |
        | -------------------- | -------------------------------------------------------------- | --------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------- |
        | **Path Parameter**   | Dynamic part of the URL used to get specific data              | `@app.get("/user/{user_id}")`<br>`def get_user(user_id: int):`                                | URL `/user/5` returns `{"user_id": 5}`                                       |
        | **`Path()`**         | Adds **validation or default values** to path parameters       | `def get_item(item_id: int = Path(..., gt=0)):`                                               | URL `/item/0` gives error: must be > 0                                       |
        | **HTTP Status Code** | Indicates if a request was successful, failed, or caused error | `@app.post("/create", status_code=201)`<br>`def create(): return {...}`                       | Returns status `201 Created` instead of default `200 OK`                     |
        | **`HTTPException`**  | Used to return an error manually if something goes wrong       | `if user_id not in users:`<br>`raise HTTPException(status_code=404, detail="User not found")` | URL `/user/999` returns error: `{"detail": "User not found"}` + status `404` |


        --> some famous http status code:

                        | Code | Meaning               | Description                   |
                        | ---- | --------------------- | ----------------------------- |
                        | 200  | OK                    | Request was successful        |
                        | 201  | Created               | A new resource was created    |
                        | 400  | Bad Request           | Client made a mistake         |
                        | 401  | Unauthorized          | Not logged in                 |
                        | 404  | Not Found             | Resource not found            |
                        | 500  | Internal Server Error | Something broke on the server |

# Query Parameter:
    Defination: 
                A query parameter is a value you pass in the URL after a ? to filter, search, or control what the API returns.

                eg: http://localhost:8000/items?name=pen&price=10

                Here:
                        name=pen ‚Üí query parameter
                        price=10 ‚Üí query parameter

                These are not part of the path (/items), but they give extra information.

    Query Parameters in FastAPI: 
                In FastAPI, you can receive query parameters by simply adding them as function arguments.
                Example:

                                from fastapi import FastAPI
                                app = FastAPI()

                                @app.get("/items")
                                def get_item(name: str, price: int):
                                return {"name": name, "price": price}

                What happens here:
                                The route is /items
                                name and price are taken from the URL query

                If you open:
                                http://localhost:8000/items?name=pen&price=10

                                Output:
                                                {
                                                "name": "pen",
                                                "price": 10
                                                }
    why we use query params: 

                | Purpose           | Example                   | Use Case                      |
                | ----------------- | ------------------------- | ----------------------------- |
                | Search / filter   | `/products?category=toys` | Show only toys                |
                | Pagination        | `/items?limit=10&page=2`  | Show page 2 with 10 items     |
                | Sorting / options | `/users?sort=asc`         | Sort users in ascending order |



    Optional Query Parameters (with Default)
                
                @app.get("/books")
                def get_books(limit: int = 10):
                    return {"limit": limit}

                URL: /books ‚Üí uses default value
                URL: /books?limit=5 ‚Üí uses 5

    Query Parameter with Query() Function

                FastAPI provides Query() to add validation and documentation.

                from fastapi import FastAPI, Query
                app = FastAPI()

                @app.get("/search")
                def search_items(name: str = Query(..., min_length=3, max_length=10, description="Item name")):
                    return {"name": name}

                üîç What this does:
                ... ‚Üí means required

                min_length=3 ‚Üí name must be at least 3 characters

                max_length=10 ‚Üí name max 10 characters

                description ‚Üí shows in Swagger docs (/docs)


    | Feature                 | Path Parameter                     | Query Parameter                            |
    | ----------------------- | ---------------------------------- | ------------------------------------------ | 
    | üìç **Location**         | Part of URL path (e.g., `/user/1`) | After `?` in URL (e.g., `/users?active=1`) |
    | ‚ö†Ô∏è **Required?**        | Always required                    | Can be optional (default value)            |
    | üß≠ **Use for**          | Identify specific resource         | Filter/search/sort/pagination              |
    | üéØ **Example**          | `/product/42` ‚Üí `product_id=42`    | `/product?sort=price`                      |
    | üîß **Declared as**      | `@app.get("/item/{item_id}")`      | `def item(sort: str = "name"):`            |
    | ‚ùå **Multiple allowed?** | Usually 1-2 max in path            | Yes, many can be used together            |
